import { Component, OnInit } from '@angular/core';
import { ClientsService } from 'src/app/services/clients/clients-.service';
import { ProductsService } from 'src/app/services/products/products.service';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { UtilsService } from 'src/app/services/utils/utils.service';
import { SalesService } from 'src/app/services/sales/sales.service';

@Component({
  selector: 'app-sales-form',
  templateUrl: './sales-form.component.html',
  styleUrls: ['./sales-form.component.scss']
})
export class SalesFormComponent implements OnInit {
  public allClients = [];
  public allProducts = [];
  public addedProducts = [];
  public isCheckd = false;
  public form: FormGroup;
  public addProductMsg = false;
  public showToaster = false;
  public toasterInfos = {};
  public navigateRoute = '/sales';

  constructor(
    private clientsService: ClientsService,
    private productsService: ProductsService,
    private formBuilder: FormBuilder,
    private utilsService: UtilsService,
    private salesService: SalesService
  ) {}

  ngOnInit() {
    this.setFormBuilder();
    this.getAllClients();
    this.getAllProducts();
  }

  public setFormBuilder() {
    this.form = this.formBuilder.group({
      customer: [null, Validators.required]
    });
  }

  public getAllClients() {
    this.clientsService
      .getAll()
      .subscribe(clients => (this.allClients = clients));
  }

  public getAllProducts() {
    this.productsService.getAll().subscribe(products => {
      products.forEach(p => {
        const product = {
          active: p.active,
          description: p.description,
          price: p.price,
          slug: p.slug,
          tags: p.tags,
          title: p.title,
          _id: p._id,
          qtd: '1'
        };
        this.allProducts.push(product);
      });
    });
  }

  public applyCssFeedback(input) {
    return this.utilsService.applyCssFeedback(input, this.form);
  }

  public addProduct(product) {
    this.addedProducts.push(product);
    this.allProducts = this.allProducts.filter(obj => {
      return obj._id !== product._id;
    });
  }

  public removeProduct(product) {
    this.allProducts.push(product);
    this.addedProducts = this.addedProducts.filter(obj => {
      return obj._id !== product._id;
    });
  }

  public onQtdChange(event: any, product) {
    this.addProductMsg = false;
    product.qtd = event.target.value;
    this.allProducts = this.allProducts.filter(obj => {
      return obj._id !== product._id;
    });
    this.allProducts.push(product);
    this.addProduct(product);
  }

  public toasterMsg(succes: boolean) {
    this.toasterInfos = {
      success: succes,
      route: this.navigateRoute
    };
    this.showToaster = true;
  }

  public onSubmit() {
    const isEmpty = (this.addedProducts === undefined || this.addedProducts.length === 0);
    if (this.form.invalid || isEmpty ) {
      this.utilsService.testFormValid(this.form);
      if (isEmpty) {
        this.addProductMsg = true;
      }
    } else {
      const payloadItems = [];
      this.addedProducts.forEach(p => {
        const item = {
          quantity: p.qtd,
          price: p.price,
          product: p._id
        };
        payloadItems.push(item);
      });

      console.log(this.form.get('customer'));

      const payload = {
        customer: this.form.get('customer').value,
        items: payloadItems
      };
      console.log(payload);
      this.salesService.save(payload).subscribe(res => {
        console.log(res);
      });
      // this.salesService.save(payload).subscribe(
      //   res => {
      //     this.toasterMsg(true);
      //   },
      //   err => {
      //     this.toasterMsg(false);
      //   }
      // );
    }
  }
}
